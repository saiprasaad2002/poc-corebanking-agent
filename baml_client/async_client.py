# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
import baml_py

from . import stream_types, types, type_builder
from .parser import LlmResponseParser, LlmStreamParser
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME as __runtime__


class BamlAsyncClient:
    __options: DoNotUseDirectlyCallManager
    __stream_client: "BamlStreamClient"
    __http_request: "BamlHttpRequestClient"
    __http_stream_request: "BamlHttpStreamRequestClient"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options
        self.__stream_client = BamlStreamClient(options)
        self.__http_request = BamlHttpRequestClient(options)
        self.__http_stream_request = BamlHttpStreamRequestClient(options)
        self.__llm_response_parser = LlmResponseParser(options)
        self.__llm_stream_parser = LlmStreamParser(options)

    def with_options(self,
        tb: typing.Optional[type_builder.TypeBuilder] = None,
        client_registry: typing.Optional[baml_py.baml_py.ClientRegistry] = None,
        collector: typing.Optional[typing.Union[baml_py.baml_py.Collector, typing.List[baml_py.baml_py.Collector]]] = None,
        env: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
    ) -> "BamlAsyncClient":
        options: BamlCallOptions = {}
        if tb is not None:
            options["tb"] = tb
        if client_registry is not None:
            options["client_registry"] = client_registry
        if collector is not None:
            options["collector"] = collector
        if env is not None:
            options["env"] = env
        return BamlAsyncClient(self.__options.merge_options(options))

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser
    
    async def CheckIntent(self, question: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Intent:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="CheckIntent", args={
            "question": question,
        })
        return typing.cast(types.Intent, result.cast_to(types, types, stream_types, False, __runtime__))
    async def Claritycheckfunction(self, user_question: str,tools: typing.List[str],description: typing.List[str],user_role: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ClarityCheck:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="Claritycheckfunction", args={
            "user_question": user_question,"tools": tools,"description": description,"user_role": user_role,
        })
        return typing.cast(types.ClarityCheck, result.cast_to(types, types, stream_types, False, __runtime__))
    async def DefineRoute(self, user_question: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Route:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="DefineRoute", args={
            "user_question": user_question,
        })
        return typing.cast(types.Route, result.cast_to(types, types, stream_types, False, __runtime__))
    async def ExtractResume(self, resume: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Resume:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="ExtractResume", args={
            "resume": resume,
        })
        return typing.cast(types.Resume, result.cast_to(types, types, stream_types, False, __runtime__))
    async def FetchResults(self, markdown_content: str,user_question: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Parameters:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="FetchResults", args={
            "markdown_content": markdown_content,"user_question": user_question,
        })
        return typing.cast(types.Parameters, result.cast_to(types, types, stream_types, False, __runtime__))
    async def SqlQueryGenerator(self, components: types.Parameters,
        baml_options: BamlCallOptions = {},
    ) -> types.SqlQuery:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="SqlQueryGenerator", args={
            "components": components,
        })
        return typing.cast(types.SqlQuery, result.cast_to(types, types, stream_types, False, __runtime__))
    async def SqlResult(self, user_question: str,sql_result: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Response:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="SqlResult", args={
            "user_question": user_question,"sql_result": sql_result,
        })
        return typing.cast(types.Response, result.cast_to(types, types, stream_types, False, __runtime__))
    async def ValidateToolCalling(self, user_question: str,tools: typing.List[str],description: typing.List[str],user_role: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Toolvalidation:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="ValidateToolCalling", args={
            "user_question": user_question,"tools": tools,"description": description,"user_role": user_role,
        })
        return typing.cast(types.Toolvalidation, result.cast_to(types, types, stream_types, False, __runtime__))
    


class BamlStreamClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def CheckIntent(self, question: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.Intent, types.Intent]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="CheckIntent", args={
            "question": question,
        })
        return baml_py.BamlStream[stream_types.Intent, types.Intent](
          result,
          lambda x: typing.cast(stream_types.Intent, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.Intent, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def Claritycheckfunction(self, user_question: str,tools: typing.List[str],description: typing.List[str],user_role: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.ClarityCheck, types.ClarityCheck]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="Claritycheckfunction", args={
            "user_question": user_question,"tools": tools,"description": description,"user_role": user_role,
        })
        return baml_py.BamlStream[stream_types.ClarityCheck, types.ClarityCheck](
          result,
          lambda x: typing.cast(stream_types.ClarityCheck, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ClarityCheck, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def DefineRoute(self, user_question: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.Route, types.Route]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="DefineRoute", args={
            "user_question": user_question,
        })
        return baml_py.BamlStream[stream_types.Route, types.Route](
          result,
          lambda x: typing.cast(stream_types.Route, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.Route, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ExtractResume(self, resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.Resume, types.Resume]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ExtractResume", args={
            "resume": resume,
        })
        return baml_py.BamlStream[stream_types.Resume, types.Resume](
          result,
          lambda x: typing.cast(stream_types.Resume, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.Resume, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def FetchResults(self, markdown_content: str,user_question: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.Parameters, types.Parameters]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="FetchResults", args={
            "markdown_content": markdown_content,"user_question": user_question,
        })
        return baml_py.BamlStream[stream_types.Parameters, types.Parameters](
          result,
          lambda x: typing.cast(stream_types.Parameters, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.Parameters, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def SqlQueryGenerator(self, components: types.Parameters,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.SqlQuery, types.SqlQuery]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="SqlQueryGenerator", args={
            "components": components,
        })
        return baml_py.BamlStream[stream_types.SqlQuery, types.SqlQuery](
          result,
          lambda x: typing.cast(stream_types.SqlQuery, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.SqlQuery, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def SqlResult(self, user_question: str,sql_result: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.Response, types.Response]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="SqlResult", args={
            "user_question": user_question,"sql_result": sql_result,
        })
        return baml_py.BamlStream[stream_types.Response, types.Response](
          result,
          lambda x: typing.cast(stream_types.Response, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.Response, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ValidateToolCalling(self, user_question: str,tools: typing.List[str],description: typing.List[str],user_role: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.Toolvalidation, types.Toolvalidation]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ValidateToolCalling", args={
            "user_question": user_question,"tools": tools,"description": description,"user_role": user_role,
        })
        return baml_py.BamlStream[stream_types.Toolvalidation, types.Toolvalidation](
          result,
          lambda x: typing.cast(stream_types.Toolvalidation, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.Toolvalidation, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    

class BamlHttpRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def CheckIntent(self, question: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="CheckIntent", args={
            "question": question,
        }, mode="request")
        return result
    async def Claritycheckfunction(self, user_question: str,tools: typing.List[str],description: typing.List[str],user_role: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="Claritycheckfunction", args={
            "user_question": user_question,"tools": tools,"description": description,"user_role": user_role,
        }, mode="request")
        return result
    async def DefineRoute(self, user_question: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="DefineRoute", args={
            "user_question": user_question,
        }, mode="request")
        return result
    async def ExtractResume(self, resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ExtractResume", args={
            "resume": resume,
        }, mode="request")
        return result
    async def FetchResults(self, markdown_content: str,user_question: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="FetchResults", args={
            "markdown_content": markdown_content,"user_question": user_question,
        }, mode="request")
        return result
    async def SqlQueryGenerator(self, components: types.Parameters,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SqlQueryGenerator", args={
            "components": components,
        }, mode="request")
        return result
    async def SqlResult(self, user_question: str,sql_result: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SqlResult", args={
            "user_question": user_question,"sql_result": sql_result,
        }, mode="request")
        return result
    async def ValidateToolCalling(self, user_question: str,tools: typing.List[str],description: typing.List[str],user_role: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ValidateToolCalling", args={
            "user_question": user_question,"tools": tools,"description": description,"user_role": user_role,
        }, mode="request")
        return result
    

class BamlHttpStreamRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def CheckIntent(self, question: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="CheckIntent", args={
            "question": question,
        }, mode="stream")
        return result
    async def Claritycheckfunction(self, user_question: str,tools: typing.List[str],description: typing.List[str],user_role: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="Claritycheckfunction", args={
            "user_question": user_question,"tools": tools,"description": description,"user_role": user_role,
        }, mode="stream")
        return result
    async def DefineRoute(self, user_question: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="DefineRoute", args={
            "user_question": user_question,
        }, mode="stream")
        return result
    async def ExtractResume(self, resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ExtractResume", args={
            "resume": resume,
        }, mode="stream")
        return result
    async def FetchResults(self, markdown_content: str,user_question: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="FetchResults", args={
            "markdown_content": markdown_content,"user_question": user_question,
        }, mode="stream")
        return result
    async def SqlQueryGenerator(self, components: types.Parameters,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SqlQueryGenerator", args={
            "components": components,
        }, mode="stream")
        return result
    async def SqlResult(self, user_question: str,sql_result: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SqlResult", args={
            "user_question": user_question,"sql_result": sql_result,
        }, mode="stream")
        return result
    async def ValidateToolCalling(self, user_question: str,tools: typing.List[str],description: typing.List[str],user_role: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ValidateToolCalling", args={
            "user_question": user_question,"tools": tools,"description": description,"user_role": user_role,
        }, mode="stream")
        return result
    

b = BamlAsyncClient(DoNotUseDirectlyCallManager({}))