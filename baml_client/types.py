# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (1)
# #########################################################################

class Tools(str, Enum):
    pass

# #########################################################################
# Generated classes (12)
# #########################################################################

class ClarityCheck(BaseModel):
    clarity: bool
    functioncall: typing.Optional[typing.List["Invocations"]] = None
    reasoning: typing.Optional[str] = None

class ComponentDetail(BaseModel):
    source: str
    crieteria: typing.Optional[str] = None
    risk: typing.Optional[str] = None

class GLParams(BaseModel):
    account_number: typing.List[str]
    branch: typing.Optional[typing.List[str]] = None
    clarification: bool
    reason: typing.Optional[str] = None

class InputPromptCheck(BaseModel):
    jail_break_attempt: bool
    response: typing.Optional[str] = None

class Intent(BaseModel):
    valid: bool

class Invocations(BaseModel):
    tool_name: str
    parameters: typing.Union[typing.List[str], typing.List[int]]

class Parameters(BaseModel):
    valid: bool
    components: typing.Optional[typing.Dict[str, typing.List["ComponentDetail"]]] = None
    formula: typing.Optional[str] = None
    planner: typing.Optional[str] = None

class Response(BaseModel):
    response_string: str

class Resume(BaseModel):
    name: str
    email: str
    experience: typing.List[str]
    skills: typing.List[str]

class Route(BaseModel):
    tool: str

class SqlQuery(BaseModel):
    sql_query: str

class Toolvalidation(BaseModel):
    valid: bool
    tool_name: typing.Optional[typing.List[str]] = None
    description: typing.Optional[typing.List[str]] = None
    reasoning: typing.Optional[str] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################
